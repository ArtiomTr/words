{"version":3,"sources":["components/GroupPickerPage.tsx","components/WordsTraining.tsx","components/MuiTheme.ts","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["GroupPickerPage","props","loadWordGroups","a","axios","get","res","setState","wordGroups","data","loaded","state","this","Paper","className","elevation","Typography","variant","List","map","value","ListItem","key","filename","button","onClick","localStorage","setItem","JSON","stringify","window","location","href","ListItemText","primary","name","secondary","description","CircularProgress","React","Component","WordsTraining","group","loadWords","Axios","words","pickWord","currentWord","Math","floor","random","length","showAns","guessWordVal","started","groupStr","getItem","parse","IconButton","style","marginRight","substring","indexOf","Icon","margin","onSubmit","e","preventDefault","trim","toLowerCase","word","definition","display","flexDirection","alignItems","width","color","marginLeft","OutlinedInput","fullWidth","onChange","target","type","fontSize","Button","theme","createMuiTheme","palette","dark","light","main","contrastText","error","App","ThemeProvider","path","exact","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50d1cc77.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Typography, Paper, List, ListItem, ListItemText, CircularProgress } from \"@material-ui/core\"\r\nimport axios from 'axios'\r\n\r\ninterface Props {\r\n}\r\n\r\nexport interface WordGroup {\r\n    filename: string,\r\n    name: string,\r\n    description: string,\r\n}\r\n\r\ninterface State {\r\n    wordGroups: WordGroup[];\r\n    loaded: boolean\r\n}\r\n\r\nexport default class GroupPickerPage extends React.Component<Props, State> {\r\n\r\n    public constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            wordGroups: [],\r\n            loaded: false\r\n        }\r\n        this.loadWordGroups();\r\n    }\r\n\r\n    private loadWordGroups = async () => {\r\n        const res = await axios.get(\"https://raw.githubusercontent.com/ArtiomTr/words/api/groups.json\");\r\n        this.setState({ wordGroups: res.data, loaded: true });\r\n    }\r\n\r\n    public render(): React.ReactNode {\r\n        const { wordGroups, loaded } = this.state;\r\n        return (\r\n            <Paper className=\"app-box\" elevation={3}>\r\n                <Typography variant=\"h4\">Choose words group</Typography>\r\n                {loaded ?\r\n                    <List>\r\n                        {wordGroups.map((value: WordGroup) =>\r\n                            <ListItem\r\n                                key={value.filename}\r\n                                button\r\n                                onClick={() => {\r\n                                    localStorage.setItem(\"words_group\", JSON.stringify(value));\r\n                                    window.location.href = window.location.href + \"words\";\r\n                                }}\r\n                            >\r\n                                <ListItemText primary={value.name} secondary={value.description} />\r\n                            </ListItem>)}\r\n                    </List>\r\n                    : <CircularProgress variant=\"indeterminate\" />\r\n                }\r\n            </Paper>\r\n\r\n        );\r\n    }\r\n\r\n}","import React from 'react'\r\nimport { Paper, Button, CircularProgress, Typography, OutlinedInput, IconButton, Icon, Link } from '@material-ui/core';\r\nimport Axios from 'axios';\r\nimport { WordGroup } from './GroupPickerPage';\r\n\r\ninterface Word {\r\n    word: string;\r\n    definition: string;\r\n    pronunciation: string;\r\n    type: string;\r\n}\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\ninterface State {\r\n\r\n    words: Word[];\r\n    loaded: boolean;\r\n    started: boolean;\r\n    currentWord: Word | null;\r\n    guessWordVal: string;\r\n    showAns: \"correct\" | \"incorrect\" | false;\r\n\r\n}\r\n\r\nexport default class WordsTraining extends React.Component<Props, State> {\r\n\r\n    private group: WordGroup | null = null;\r\n\r\n    public constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            words: [],\r\n            loaded: false,\r\n            started: false,\r\n            currentWord: null,\r\n            guessWordVal: \"\",\r\n            showAns: false\r\n        }\r\n        const groupStr = localStorage.getItem(\"words_group\");\r\n        if (groupStr)\r\n            this.group = JSON.parse(groupStr);\r\n        this.loadWords();\r\n    }\r\n\r\n    private loadWords = async () => {\r\n        const words = await Axios.get(\"https://raw.githubusercontent.com/ArtiomTr/words/api/words/\" + this.group?.filename);\r\n\r\n        this.setState({ words: words.data, loaded: true });\r\n    }\r\n\r\n    private pickWord = () => {\r\n        const { words } = this.state;\r\n        this.setState({\r\n            currentWord: words[Math.floor(Math.random() * words.length)],\r\n            showAns: false,\r\n            guessWordVal: \"\"\r\n        })\r\n    }\r\n\r\n    public render(): React.ReactNode {\r\n        const { currentWord, loaded, started, guessWordVal, showAns } = this.state;\r\n        return (\r\n            <Paper className=\"app-box\" elevation={3}>\r\n                <div className=\"app-box-title\">\r\n                    <IconButton\r\n                        style={{\r\n                            marginRight: 10\r\n                        }}\r\n                        onClick={() =>\r\n                            window.location.href = window.location.href.substring(0, window.location.href.indexOf(\"/#/\") + 3)}\r\n                    >\r\n                        <Icon>arrow_back</Icon>\r\n                    </IconButton>\r\n                    <Typography variant=\"h4\" style={{ margin: \"10px 0\" }}>{this.group?.name}</Typography>\r\n                </div>\r\n                {\r\n                    started && currentWord ?\r\n                        <form\r\n                            onSubmit={(e) => {\r\n                                e.preventDefault();\r\n                                if (!showAns) {\r\n                                    this.setState({ showAns: guessWordVal.trim().toLowerCase() === currentWord.word.trim().toLowerCase() ? \"correct\" : \"incorrect\" });\r\n                                } else {\r\n                                    this.pickWord();\r\n                                }\r\n                            }}\r\n                        >\r\n                            <Typography style={{ margin: \"10px 0\" }}>{currentWord.definition}</Typography>\r\n                            <div style={{\r\n                                display: \"flex\",\r\n                                flexDirection: \"row\",\r\n                                alignItems: \"center\"\r\n                            }}>\r\n                                {!showAns ? <OutlinedInput\r\n                                    fullWidth={true}\r\n                                    onChange={\r\n                                        (e: React.ChangeEvent<HTMLInputElement>) =>\r\n                                            this.setState({ guessWordVal: e.target.value })\r\n                                    }\r\n                                    margin=\"dense\" />\r\n                                    :\r\n                                    <div style={{\r\n                                        display: \"flex\",\r\n                                        width: \"100%\"\r\n                                    }}>\r\n                                        {showAns === \"correct\" ?\r\n                                            <Icon color=\"secondary\">check_circle</Icon>\r\n                                            :\r\n                                            <Icon style={{ color: \"#B00020\" }}>cancel</Icon>}\r\n                                        <Typography style={{ width: \"100%\", marginLeft: \"10px\" }} color={showAns === \"correct\" ? \"secondary\" : \"error\"}>{currentWord.word}</Typography>\r\n                                    </div>\r\n                                }\r\n                                <IconButton\r\n                                    style={{\r\n                                        marginLeft: 10\r\n                                    }}\r\n                                    type=\"submit\"\r\n                                >\r\n                                    <Icon fontSize=\"small\">arrow_forward</Icon>\r\n                                </IconButton>\r\n                            </div>\r\n                        </form>\r\n                        :\r\n                        <Button onClick={() => {\r\n                            if (loaded) {\r\n                                this.setState({ started: true })\r\n                                this.pickWord();\r\n                            }\r\n                        }} color=\"primary\" variant=\"contained\">\r\n                            {loaded ?\r\n                                \"Begin\"\r\n                                : <CircularProgress color=\"inherit\" variant=\"indeterminate\" />\r\n                            }\r\n                        </Button>\r\n                }\r\n            </Paper>\r\n        );\r\n    }\r\n\r\n}","import { createMuiTheme } from \"@material-ui/core\";\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            dark: \"#303F9F\",\r\n            light: \"#C5CAE9\",\r\n            main: \"#3F51B5\",\r\n            contrastText: \"#FFFFFF\"\r\n        },\r\n        secondary: {\r\n\r\n            light: \"#009688\",\r\n            main: \"#00796B\",\r\n            dark: \"#00796B\",\r\n            contrastText: \"#FFF\"\r\n\r\n        },\r\n        error: {\r\n            main: \"#B00020\"\r\n        }\r\n    }\r\n});\r\n\r\nexport default theme;","import React from 'react'\r\nimport \"./app.scss\"\r\nimport GroupPickerPage, { WordGroup } from './GroupPickerPage'\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport WordsTraining from './WordsTraining';\r\nimport { ThemeProvider } from '@material-ui/core';\r\nimport theme from './MuiTheme';\r\n\r\nexport default class App extends React.Component {\r\n\r\n    public render(): React.ReactNode {\r\n        return (\r\n            <ThemeProvider theme={theme}>\r\n                <div className=\"app-wrapper\">\r\n                    <Router>\r\n                        <Switch>\r\n                            <Route path=\"/words\">\r\n                                <WordsTraining />\r\n                            </Route>\r\n                            <Route exact path=\"/\">\r\n                                <GroupPickerPage />\r\n                            </Route>\r\n                        </Switch>\r\n                    </Router>\r\n                </div>\r\n            </ThemeProvider>\r\n        );\r\n    }\r\n\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}