{"version":3,"sources":["components/GroupPickerPage.tsx","components/WordsTraining.tsx","components/MuiTheme.ts","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["GroupPickerPage","props","loadWordGroups","a","axios","get","res","setState","wordGroups","data","loaded","state","this","className","Typography","color","variant","List","map","value","ListItem","key","filename","button","onClick","localStorage","setItem","JSON","stringify","window","location","href","ListItemText","primary","name","CircularProgress","React","Component","RandomWordGenerator","words","possibilities","recalcPossibilities","val","index","i","length","word","tmp","guessed","diff","getRandom","rand","Math","random","cur","possibility","WordsTraining","group","lastGroup","randomGenerator","refreshGroup","groupStr","getItem","parse","loadWords","Axios","pickWord","currentWord","showAns","guessWordVal","console","log","started","show","classNames","IconButton","style","marginRight","substring","indexOf","Icon","margin","onSubmit","e","preventDefault","trim","toLowerCase","display","flexDirection","alignItems","width","marginLeft","OutlinedInput","fullWidth","onChange","target","type","fontSize","definition","Button","theme","createMuiTheme","palette","dark","light","main","contrastText","secondary","error","locationAlias","Map","App","currentPage","pathname","ThemeProvider","withRouter","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd5e1556.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Typography, Paper, List, ListItem, ListItemText, CircularProgress } from \"@material-ui/core\"\r\nimport axios from 'axios'\r\n\r\ninterface Props {\r\n    show: boolean;\r\n}\r\n\r\nexport interface WordGroup {\r\n    filename: string,\r\n    name: string,\r\n    description: string,\r\n}\r\n\r\ninterface State {\r\n    wordGroups: WordGroup[];\r\n    loaded: boolean\r\n}\r\n\r\nexport default class GroupPickerPage extends React.Component<Props, State> {\r\n\r\n    public constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            wordGroups: [],\r\n            loaded: false\r\n        }\r\n        this.loadWordGroups();\r\n    }\r\n\r\n    private loadWordGroups = async () => {\r\n        const res = await axios.get(\"https://raw.githubusercontent.com/ArtiomTr/words/api/groups.json\");\r\n        this.setState({ wordGroups: res.data, loaded: true });\r\n    }\r\n\r\n    public render(): React.ReactNode {\r\n        const { wordGroups, loaded } = this.state;\r\n        return (\r\n            <div className=\"group-picker\">\r\n                <Typography color=\"inherit\" variant=\"h4\" className=\"group-picker__header\">Pick words group</Typography>\r\n                {loaded ?\r\n                    <List className=\"group-picker__list\">\r\n                        {wordGroups.map((value: WordGroup) =>\r\n                            <ListItem\r\n                                key={value.filename}\r\n                                button\r\n                                onClick={() => {\r\n                                    localStorage.setItem(\"words_group\", JSON.stringify(value));\r\n                                    window.location.href = window.location.href + \"words\";\r\n                                }}\r\n                            >\r\n                                <ListItemText primary={value.name} />\r\n                            </ListItem>)}\r\n                    </List>\r\n                    : <CircularProgress variant=\"indeterminate\" />\r\n                }\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}","import React from 'react'\r\nimport { Paper, Button, CircularProgress, Typography, OutlinedInput, IconButton, Icon, Link } from '@material-ui/core';\r\nimport Axios from 'axios';\r\nimport { WordGroup } from './GroupPickerPage';\r\nimport classNames from 'classnames';\r\n\r\ninterface Word {\r\n    word: string;\r\n    definition: string;\r\n    pronunciation: string;\r\n    type: string;\r\n}\r\n\r\ninterface Props {\r\n    show: boolean;\r\n}\r\n\r\ninterface State {\r\n\r\n    words: Word[];\r\n    loaded: boolean;\r\n    started: boolean;\r\n    currentWord: Word | null;\r\n    guessWordVal: string;\r\n    showAns: \"correct\" | \"incorrect\" | false;\r\n\r\n}\r\n\r\nclass RandomWordGenerator {\r\n\r\n    private words: Word[];\r\n    private possibilities: number[];\r\n\r\n    public constructor(words: Word[]) {\r\n        this.words = words;\r\n        this.possibilities = words.map(\r\n            () =>\r\n                0.5\r\n        )\r\n    }\r\n\r\n    public recalcPossibilities = (val: { word: string, guessed: boolean }) => {\r\n        let index = 0;\r\n        for (let i = 0; i < this.words.length; i++) {\r\n            if (val.word === this.words[i].word) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        let tmp = this.possibilities[index];\r\n        this.possibilities[index] *= (val.guessed ? 0.8 : 1.2);\r\n        let diff = tmp - this.possibilities[index];\r\n        this.possibilities = this.possibilities.map((value: number, index: number) => {\r\n            if (index === index)\r\n                return value;\r\n            else\r\n                return value + (diff * (value / (this.possibilities.length * 0.5)));\r\n        });\r\n    }\r\n\r\n    public getRandom = (): Word => {\r\n        const rand = Math.random() * this.words.length * 0.5;\r\n        let cur = 0;\r\n        for (let i = 0; i < this.possibilities.length; i++) {\r\n            const possibility = this.possibilities[i];\r\n            if (cur < rand && cur + possibility > rand) {\r\n                return this.words[i];\r\n            }\r\n            cur += possibility;\r\n        }\r\n        return this.words[0];\r\n    }\r\n\r\n}\r\n\r\nexport default class WordsTraining extends React.Component<Props, State> {\r\n\r\n    private group: WordGroup | null = null;\r\n    private lastGroup: string = \"\";\r\n    private randomGenerator: RandomWordGenerator | null = null;\r\n\r\n    public constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            words: [],\r\n            loaded: false,\r\n            started: false,\r\n            currentWord: null,\r\n            guessWordVal: \"\",\r\n            showAns: false\r\n        }\r\n        this.refreshGroup();\r\n    }\r\n\r\n    private refreshGroup = () => {\r\n        const groupStr = localStorage.getItem(\"words_group\");\r\n        if (groupStr && groupStr !== this.lastGroup) {\r\n            this.lastGroup = groupStr;\r\n            this.group = JSON.parse(groupStr);\r\n            this.loadWords(this.group!.filename);\r\n        }\r\n\r\n    }\r\n\r\n    private loadWords = async (filename: string) => {\r\n        const words = await Axios.get(`https://raw.githubusercontent.com/ArtiomTr/words/api/words/${filename}`);\r\n        this.randomGenerator = new RandomWordGenerator(words.data);\r\n        this.setState({ words: words.data, loaded: true });\r\n    }\r\n\r\n    private pickWord = () => {\r\n        this.setState({\r\n            currentWord: this.randomGenerator?.getRandom() ?? null,\r\n            showAns: false,\r\n            guessWordVal: \"\"\r\n        }, () => console.log(this.state.currentWord?.word));\r\n    }\r\n\r\n    public render(): React.ReactNode {\r\n        const { show } = this.props;\r\n        const { currentWord, loaded, started, guessWordVal, showAns } = this.state;\r\n        this.refreshGroup();\r\n        return (\r\n            <div className={classNames(\"app-box\", { \"app-box-show\": show })}>\r\n                <div className=\"app-box-container\">\r\n                    <div className=\"app-box-container__title\">\r\n                        <IconButton\r\n                            style={{\r\n                                marginRight: 10\r\n                            }}\r\n                            color=\"inherit\"\r\n                            onClick={() => {\r\n                                this.setState({ started: false });\r\n                                window.location.href = window.location.href.substring(0, window.location.href.indexOf(\"/#/\") + 3)\r\n\r\n                            }}\r\n                        >\r\n                            <Icon color=\"inherit\">arrow_back</Icon>\r\n                        </IconButton>\r\n                        <Typography variant=\"h4\" style={{ margin: \"10px 0\" }}>{this.group?.name}</Typography>\r\n                    </div>\r\n                    {\r\n                        started && currentWord ?\r\n                            <form\r\n                                onSubmit={(e) => {\r\n                                    e.preventDefault();\r\n                                    if (!showAns) {\r\n                                        const guessed = guessWordVal.trim().toLowerCase() === currentWord.word.trim().toLowerCase();\r\n                                        this.randomGenerator?.recalcPossibilities({ word: currentWord.word, guessed })\r\n                                        this.setState({ showAns: guessed ? \"correct\" : \"incorrect\" });\r\n                                    } else {\r\n                                        this.pickWord();\r\n                                    }\r\n                                }}\r\n                            >\r\n                                <div style={{\r\n                                    display: \"flex\",\r\n                                    flexDirection: \"row\",\r\n                                    alignItems: \"center\"\r\n                                }}>\r\n                                    {!showAns ? <OutlinedInput\r\n                                        fullWidth={true}\r\n                                        onChange={\r\n                                            (e: React.ChangeEvent<HTMLInputElement>) =>\r\n                                                this.setState({ guessWordVal: e.target.value })\r\n                                        }\r\n                                        margin=\"dense\" />\r\n                                        :\r\n                                        <div style={{\r\n                                            display: \"flex\",\r\n                                            width: \"100%\"\r\n                                        }}>\r\n                                            {showAns === \"correct\" ?\r\n                                                <Icon color=\"secondary\">check_circle</Icon>\r\n                                                :\r\n                                                <Icon style={{ color: \"#B00020\" }}>cancel</Icon>}\r\n                                            <Typography style={{ width: \"100%\", marginLeft: \"10px\" }} color={showAns === \"correct\" ? \"secondary\" : \"error\"}>{currentWord.word}</Typography>\r\n                                        </div>\r\n                                    }\r\n                                    <IconButton\r\n                                        style={{\r\n                                            marginLeft: 10\r\n                                        }}\r\n                                        type=\"submit\"\r\n                                    >\r\n                                        <Icon fontSize=\"small\">arrow_forward</Icon>\r\n                                    </IconButton>\r\n                                </div>\r\n                                <Typography className=\"word-definition\">{currentWord.definition}</Typography>\r\n                            </form>\r\n                            :\r\n                            <Button onClick={() => {\r\n                                if (loaded) {\r\n                                    this.setState({ started: true })\r\n                                    this.pickWord();\r\n                                }\r\n                            }} color=\"primary\" variant=\"contained\">\r\n                                {loaded ?\r\n                                    \"Begin\"\r\n                                    : <CircularProgress color=\"inherit\" variant=\"indeterminate\" />\r\n                                }\r\n                            </Button>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import { createMuiTheme } from \"@material-ui/core\";\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            dark: \"#303F9F\",\r\n            light: \"#C5CAE9\",\r\n            main: \"#3F51B5\",\r\n            contrastText: \"#FFFFFF\"\r\n        },\r\n        secondary: {\r\n\r\n            light: \"#009688\",\r\n            main: \"#00796B\",\r\n            dark: \"#00796B\",\r\n            contrastText: \"#FFF\"\r\n\r\n        },\r\n        error: {\r\n            main: \"#B00020\"\r\n        }\r\n    }\r\n});\r\n\r\nexport default theme;","import React from 'react'\r\nimport \"./app.scss\"\r\nimport GroupPickerPage, { WordGroup } from './GroupPickerPage'\r\nimport { HashRouter as Router, Route, Switch, withRouter, RouteComponentProps } from 'react-router-dom'\r\nimport WordsTraining from './WordsTraining';\r\nimport { ThemeProvider } from '@material-ui/core';\r\nimport theme from './MuiTheme';\r\n\r\ninterface Props extends RouteComponentProps {\r\n\r\n}\r\n\r\ninterface State {\r\n\r\n}\r\n\r\nconst locationAlias = new Map<string, string>([\r\n    [\"/\", \"groupPicker\"],\r\n    [\"/words\", \"words\"]\r\n]);\r\n\r\nclass App extends React.Component<Props> {\r\n\r\n    private currentPage: \"groupPicker\" | \"words\" | \"404\";\r\n\r\n    public constructor(props: Props) {\r\n        super(props);\r\n        this.currentPage = (locationAlias.get(props.location.pathname) as any) ?? \"404\";\r\n    }\r\n\r\n    public render(): React.ReactNode {\r\n        this.currentPage = (locationAlias.get(this.props.location.pathname) as any) ?? \"404\";\r\n        return (\r\n            <ThemeProvider theme={theme}>\r\n                <div className=\"app-wrapper\">\r\n                    <WordsTraining show={this.currentPage === \"words\"} />\r\n                    <GroupPickerPage show={this.currentPage === \"groupPicker\"} />\r\n                </div>\r\n            </ThemeProvider>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default withRouter(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <App />\r\n    </HashRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}